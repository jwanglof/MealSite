{
  "name": "encryptionhelper",
  "version": "0.0.3",
  "description": "A collection of helper functions that encrypt, decrypt, and hash strings and files based on the native crypto module",
  "keywords": [
    "encryption",
    "decryption",
    "hashing",
    "md5",
    "aes",
    "hex",
    "crypto",
    "files",
    "strings"
  ],
  "author": {
    "name": "Tarun Chaudhry",
    "email": "tarunc92@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tarunc/EncryptionHelper.git"
  },
  "dependencies": {},
  "devDependencies": {},
  "main": "index",
  "readme": "\n# EncryptionHelper\n\n  A collection of helper functions that encrypt, decrypt, and hash strings and files based on NodeJS's native `crypto` module.\n  This module can be used to create ciphers and decipher them. It makes dealing with Node's `crypto` module a lot easier.\n\n## Installation\n\n`npm install --save encryptionhelper`\n\n## Usage\n\n```javascript\nvar EncryptionHelper = require('encryptionhelper');\n\nvar hash = EncryptionHelper.hash('some buffer/string data', 'md5');\n// hash is equal to md5 of the given string\n// Also supports MD5, SHA1, SHA256, and many more (based on whatever NodeJS natively supports-- use `openssl list-message-digest-algorithms` to display the avaiable digest algorithms on your machine)\n\nvar fileStream = EncryptionHelper.hashFile('path/to/file', 'md5', function (err, res) {\n  // err is any error that occured\n  // res is the md5 hash of the file at path/to/file\n});\n\nvar myKey = 'you-will-never-guess';\nvar cipher = EncryptionHelper.cipher(myKey, 'some buffer/string data', 'aes256');\n// Creates a aes256-based cipher using the key provided\n// Supports more than just the AES256 algo-- supports all the algo's NodeJS's crypto module supports\n// Use `openssl list-cipher-algorithms` to display the available cipher algorithms on your machine\n\nvar originalString =  EncryptionHelper.decipher(myKey, cipher);\n// originalString === 'some buffer/string data'\n\nvar fileStream = EncryptionHelper.cipherFile(myKey, 'path/to/file', function (err, res) {\n  // err is any error that occured\n  // res is the ciphered/encrypted version of the file's contents\n});\n\nvar fileStream = EncryptionHelper.decipherFile(myKey, 'path/to/file', function (err, res) {\n  // err is any error that occured\n  // res is the deciphered/unencrypted version of the file's contents\n});\n```\n\n## API\n\n#### EncryptionHelper.hash(data, [algorithm, [outputEncoding, [inputEncoding]]]);\n\nCalculates and returns a checksum `String` or `Buffer`, the digest of all of the passed `data` to be hashed.\n\nParameters:\n* `data` - `String` or `Buffer` - represents the data to be used to create the hash\n* `algorithm` - `String` - represents the algorithm to be used to create the digest.\nUse `openssl list-message-digest-algorithms` or `console.log(require('crypto').getHashes());` to display the avaiable digest algorithms on your machine. Defaults to `'md5'`.\n* `outputEncoding` - `String` - represents the encoding of the output produced by this function. This can be `'hex'`, `'binary'`, or `'base64'`. If encoding is passed in as null, then a buffer is returned. Defaults to `'hex'`.\n* `inputEncoding` - `String` - represents the encoding of the input `data`. This can be `'utf8'`, `'ascii'`, or `'binary'`. If encoding is passed in as null, then a buffer is expected. Defaults to `'utf8'`.\n\nReturns: a hash string\n\n#### EncryptionHelper.hashFile(filePath, [algorithm, [outputEncoding, [inputEncoding]]], cb);\n\nCalculates and returns a checksum `String` or `Buffer`, the digest of all of the passed `data` to be hashed.\n\nParameters:\n* `file` - `String` - represents the path to the file to be used to create the hash\n* `algorithm` - `String` - represents the algorithm to be used to create the digest.\nUse `openssl list-message-digest-algorithms` or `console.log(require('crypto').getHashes());` to display the avaiable digest algorithms on your machine. Defaults to `'md5'`.\n* `outputEncoding` - `String` - represents the encoding of the output produced by this function. This can be `'hex'`, `'binary'`, or `'base64'`. If encoding is passed in as null, then a buffer is returned. Defaults to `'hex'`.\n* `inputEncoding` - `String` - represents the encoding of the input `data`. This can be `'utf8'`, `'ascii'`, or `'binary'`. If encoding is passed in as null, then a buffer is expected. Defaults to `'utf8'`.\n* `cb` - `Function` - A callback to run afterwords. The method signature looks like: `function (err, hash){ }`\n\nReturns: an open file stream\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Tarun Chaudhry &lt;tarunc92@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/tarunc/EncryptionHelper/issues"
  },
  "homepage": "https://github.com/tarunc/EncryptionHelper",
  "_id": "encryptionhelper@0.0.3",
  "dist": {
    "shasum": "1ede105538b67ecdb16de0e61a9056f72551ff98"
  },
  "_from": "encryptionhelper@0.0.3",
  "_resolved": "https://registry.npmjs.org/encryptionhelper/-/encryptionhelper-0.0.3.tgz"
}
